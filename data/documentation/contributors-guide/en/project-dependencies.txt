Project dependencies between Doctrine projects are handled through git submodules.
The code of the particular Doctrine project you have cloned is located under **lib/Doctrine**.
The source code of dependencies to other projects resides under **lib/vendor**.
If you have a local clone of a Doctrine project that you use directly and this
project has dependencies to other (Doctrine) projects, you must run the following
commands in order for the git submodules to be loaded:

    $ git submodule init
    $ git submodule update

Alternatively, consider using a packaged release from the [Doctrine Website](http://www.doctrine-project.org)
that contains everything you need already.

++ Bumping Versions

To bump/upgrade a dependency version you just need to follow a few simple steps:

    $ cd lib/vendor/doctrine-dbal
    $ git checkout 2.0.0BETA2
    $ cd ../../../
    $ git commit
    $ git push

++ Testing Different Versions

Testing another version is much the same as bumping the version except that you
must not forget to go back to the old version when you're done otherwise if you
git `commit -a` you will push the new version you were testing. Here is an example:

    $ cd lib/vendor/doctrine-dbal
    $ git checkout 2.0.0BETA2
    $ cd ../../../

Now you can run the tests against the DoctrineDBAL-2.0.0BETA2 version to test
that the new version of the dependency doesn't break anything:

    $ cd tests
    $ phpunit Doctrine/Tests/AllTests.php

Now don't forget to change back the version after testing if you are not going
to bump it permanently and commit it:

    cd lib/vendor/doctrine-dbal
    git checkout 2.0.0-BETA1

++ Checking Submodule Tag

If you want to check what tag a submodule is currently at you can use something
like this from the submodule root directory:

    $ cd lib/vendor/doctrine-dbal

To get the status of the submodule:

    $ git submodule status

Then use the SHA that is shown in the following command to show the name of the tag:

    $ git show-ref --tags | grep SHA