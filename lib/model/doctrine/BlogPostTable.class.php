<?php
/*
 * Edit this file to customise your model table
 *
 * auto-generated by the sfDoctrine plugin
 */
class BlogPostTable extends Doctrine_Table
{
  public function getHomepageBlogPosts()
  {
    return $this->getLatest(4);
  }

  public function getBlogIndex()
  {
    return $this->getLatest(10);
  }

  public function getBlogTag($params)
  {
    return $this->getLatestQuery(10000)
      ->andWhere('t.slug = ? OR t.name = ?')
      ->execute(array($params['tag'], $params['tag']));
  }

  public function getBlogPopular()
  {
    return $this->getLatestQuery(25)
      ->orderBy('num_comments DESC')
      ->addHaving('num_comments > 0')
      ->execute();
  }

  public function getLatest($num)
  {
    $query = $this->getLatestQuery($num);
    
    return $query->execute();
  }
  
  public function getLatestQuery($num)
  {
      $query = $this->getBaseQuery();
      $query->limit($num);
      $query->orderby('p.created_at DESC');
      
      return $query;
  }
  
  public function getBaseQuery()
  {
      return $this->createQuery('p')
        ->select('*')
        ->addSelect('COUNT(DISTINCT c.id) AS num_comments')
        ->leftJoin('p.Tags t')
        ->leftJoin("p.Comments c WITH c.record_type = ?", 'BlogPost')
        ->leftJoin('p.User u')
        ->andWhere('p.is_published = 1 AND p.created_at <= NOW()')
        ->groupBy('p.id');
  }
  
  public function getPost($id)
  {
      $query = $this->getBaseQuery();
      $query->addWhere('p.id = ?', $id);
      
      return $query->execute();
  }
  
  public function getNavigationPosts($id)
  {
      $blogPost = $this->find($id);
      $prevQuery = $this->getBaseQuery();
      $prevQuery->addWhere('p.created_at < ?', $blogPost->getCreatedAt())
                ->orderBy('p.created_at DESC');
      $prev = $prevQuery->fetchOne();
      
      $return = array();
      if ($prev) {
        $return['prev'] = $prev;
      }
      
      $nextQuery = $this->getBaseQuery();
      $nextQuery->addWhere('p.created_at > ?', $blogPost->getCreatedAt())
                ->orderBy('p.created_at ASC');
      $next = $nextQuery->fetchOne();
      
      if ($next) {
        $return['next'] = $next;
      }
      
      return $return;
  }
  
  public function getBySlug($slug)
  {
    $query = $this->getBaseQuery();
    $query->addWhere('p.slug = ?', $slug);
    $query->limit(1);
    
    return $query->execute()->getFirst();
  }
  
  public function getArchives()
  {
    $query = $this->getBaseQuery();
    $query->addOrderBy('p.created_at desc');
    $results = $query->execute();
    
    $archives = array();
    foreach ($results as $result) {
      $date = date('F Y', strtotime($result['created_at']));
      $archives[$date][] = $result;
    }
    
    return $archives;
  }
}